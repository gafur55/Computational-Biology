# BA3A
def kmer_composition(text, k):
    composed_kmers = []
    for i in range(len(text)- k + 1):
        composed_kmers.append(text[i:i+k])
    return(sorted(composed_kmers))

# result = (kmer_composition('ATTAGATCAGGCCACGTGAAGCCAACGGCATCCTAGTCATTATGCTGCGCGTTGGTAGGTTTTCTTTATTCTGCGCAGTAAGCAAATGGTAAGTGCAATAGGAGACAAGAGCGTTATGTAGACGAATGTTGGTGCAAAGGACGTCTCAGAGGATACGAGGCAATGACGGGTGATCCATACCGGAGGGTTGCGCGGTAGTGTTAACGTTCGCCCGCTCAAAGCTTTGGGAGAAGTTAACTCCCATGGCAGGCATCCCTTTACGTTCGGTCTCTGGCACCGTCTACTACCTAGCTATTTTAGGAACGTCATTTCCCATGCATATGGCGGAGTATGACTAGGATCTTTTCGAAGATCGACTAAGCCACCCACGGCGACTTGGATTGTCCCACACGCCTGAAACAACAAGATAAGTGCAAGTACTTCCCTTACCGCATGTATCGATATGTATTGCCCCAGCTCTTGTCGAAGCTTAAGACCGAGGGGGTAAAGTTGCAGATCCAATCGAAATAGTATGCTTTGGTGGGAGGTTGGCATGACAGTCATTGTTATCATTCAGTTACCTATGAACTAAACTTTCGTCAAGTCTCCCTGAACAAAGTAACGGCCAACGAGACGACCGATAAGTATACTTTTACGTGCGGACTGATGGGTGTTCATCGGATCTGGTGATGTGTTCTGGCACCATCCCCATAGGTACAGGATGTAACTTCGTCACTCGATCTACTGCCTACGGCTAAATTGTTAGGTAGTGATATTTATACCATAAACTCTCTTGCTTAACACAATGGGAAGCTGCCCGTATGCATTCACGCGCAACCATGGCTACCCCACCCAGTCTAGGCTGAGGTAGGCCCCGGTCGTGTGTGATGAAACCCCACGTTTGCATGTTCTTAAGGAAATACTAACCTACAAAGTGTCTGAATCTAGTACACCCGCGAGTCCAACTCAATAGAACGCTCATTTATATTTGTCTCATGAACGAACCTGCATAGGAACATCG', 50))
# for i in result:
#     print(i)


#BA3B
def string_by_genome_path(patterns):
    string = patterns[0]
    for i in range(1, len(patterns)):
        string += patterns[i][len(patterns[i])-1]

    return string

# dna = []                    
# with open("rosalind_ba3b.txt", "r") as file:
#     for line in file:
#         words = line.strip().split()  # Removes '\n' and splits by space
#         dna.extend(words)  # Adds all words to the list
# print(string_by_genome_path(dna))


#BA3C
def overlap(patterns):
    graph = []
    for i in range(len(patterns)):
        checker = patterns[i]
        for j in patterns:
            if checker[1:len(checker)] == j[0:len(j)-1]:
                graph.append([checker, j])
    return graph

# dna = []                    
# with open("rosalind_ba3c.txt", "r") as file:
#     for line in file:
#         words = line.strip().split()  # Removes '\n' and splits by space
#         dna.extend(words)  # Adds all words to the list
# result = overlap(dna)
# for neighbors in result:
#     print(neighbors[0], "->", neighbors[1])


#BA3D
def debruijn(text, k):
    bruijn_graph = {}
    for i in range(len(text)-(k-1)+1):
        checker = text[i:i+k-1]
        for j in range(len(text)-(k-1)+1):
            if checker[1:len(checker)] == text[j:j+k-1][0:len(text[j:j+k-1])-1]:
                bruijn_graph.setdefault(checker, set()).add(text[j:j+k-1])
    return bruijn_graph

# result_dict = debruijn('TGGAAAGGTATGTGTTAGCTACATCAACAGATTATTCACGTCTTACCACAAGCCCACCCCATACAATGTCGCACTAATCCGGCTATAGAAGGCGTACCGCAACACAGCATGTTCAGGTGTCTATAACGTATCGTAACATACTTTCACGACAGGAAGAATCACCGCATCGGCCGAATCAAGTTGCTAGAGGGATGTATCGAGATACCGTTTACGCTCACAGCCCTACGTGACGGAATTACTGCGGAACGCAATCCTTGTGCGGTCTGTTTGCTTCCCCGCTTTCAGCGTTACCGCAGCTGTACCTCCCCCACCCTTCTGCATTCCACAATCTGTGATACGCACAGAATCATTGCACTGTGGATGGGGCTTAGTTGAGCACAATTAGCCGCAATTCCAACAATCTTTAAGGCCAAGCAGTGCTGTGCAGGCGGGCCGTCCCCCTTAAATCGCTATTCAATATATTCTAGACTACTCGCGTTCCATCGACAGCGGCAGGCTGGTTAAGCTAAAGTTCATAAGTTTCGAGCATGGAGGATGAATTGGAAGATCGTAGAGCAATCCTTAGACGTCGAGGCCTACTAGTAGGGTAACACCCATTGCCGAGAGGGAGATTCTAGAAGGGCCATCCCTTTACACTGTCTCCTACGAATGGGTAGTTAGGAAACAAGTTTAACCGAGTTTGGGGCACCGTGGCTCGGGATTGTATACATGTAACTTTGCAATGGGTGGTGAGCAGTATCAACGCGGCCGGTACATTAGAACCCCCGCTGCTTCTTCGAGCAACGGCGACACCTCAGGAGCACATGCGCTCAATCCTTCCTGGCACAACAGATTATCGTTTTTAAAGACATCGGCTTACATTGTTTTGGCATATGCGGAATGACACACGCGAGCTCAATATTACACGAAGGGAACCGACATACTTCGCGTAACGCGAACCACTGTATTCCGCATAAAAGACCCGTGGAGCGCGCGATGAGTGTTAGGTTCAGAGCCTAATGCAGATAGGGAGTTGCGTTAGTGGCGGTGGACGTCCTCCTGGGCTAAATGCGCCCATTTTGCTGGGGTTTGTCCACTGTTTATCCCCAGACACCGCTCTTCGCTGGGTTTGATGACGCAGTTTTTTGCCCGAGCTCTATTCTTCCTCGAACCTCCCGTTGACCCCCATAAGAAGATACCGGGGAATCGTTGGTGCGCGCAGGCATTCCCCATCAAGACGGCCGTTCCGCCTCGTCGCATATGTATACGTTTTCGACTGCCACATTTATACTTGCCTGGTCCCCCTGTCAGCGCGTACTACGCAGAGTAGTGAGGCAGCATGTCATTCCTCAATCATTTCATTTCGTTAAGTTTTGTTGGTGCTGCTGTTACCAACCATGCCGAGCTCGCCACAGGCTTTGTCACACATAGGATCGATGCGCTGAGGATGCCCCCAATACTATCTGCCTTCAGTGACAGAATACCATTCAATTCCGGGCTTTTCACCTGAAATGGAGGAGTATGGCACGGGATACTACCGTCTGAGTGCTTCAACTCTGCGTAATCACGTATCCAACGGCGCTGCCGCGAATATGTGTCTTTTACTCCAAGGTAATTTACATTCGCATCGAAAAATTATGTCATCTCAATGATGTAACTATCTACAGACCGTTCTCGGTGTGTTACTCTTCGAATTAGTGTTCTCCGTTACAAGCACGTCGTGCTGAACCAAGAAATGCTATATTAACAGCAACATCACTCCGAATCTCCCCTGTCTTACCAGCTTTGTACTCGTCCACCCGGGGTAATCAGACCAAACAGGCCTACTCGTGACTTACCTCTTCGAAGGGGTGAGACGGCAATCCCTGGATAGAGGAACAGGATAACGCCGGTATGACGAGAAGAACCACGGTGAGACCGTCATTGCGGTTATATAGAATATAATTGACGCCCGGAGGATAAGAAGTCAAGGAGTACCGGTCGGCAGCTCGACCCTAACATAGCACCAGTGTTATCGTAGA', 12)
# output_file = "output.txt"
# with open(output_file, "w") as file:
#     for key, values in result_dict.items():
#         file.write(f"{key} -> {','.join(values)}\n")
# print(f"Dictionary has been written to {output_file}")
    

# BA3E
def debruijn_from_kmers(patterns):
    result = {}
    for i in patterns:
        if i[:-1] not in result:
            result[i[:-1]] = [i[1:]]  
        else:
            result[i[:-1]].append(i[1:])  
    return result

# output_file = "output.txt"
# with open('rosalind_ba3e.txt', 'r') as f:
#     p = [line.strip() for line in f.readlines()]
#     res = debruijn_from_kmers(p)
# with open(output_file, "w") as file:
#     for i in sorted(res.keys()):
#         file.write(i + " -> " + ",".join(res[i]) + "\n")  # Join list elements correctly
# print(f"Dictionary has been written to {output_file}")
