#BA2D
def profileProbable(text, k, profile):
	maxprob = 0
	kmer = text[0:k]
	for i in range(1,len(text) - k +1):
		prob = 1
		pattern = text[i:i+k]
		for j in range(k):
			l = s_to_n(pattern[j])
			prob *= profile[l][j]
		if prob > maxprob:
			maxprob = prob
			kmer = pattern
	return kmer

def n_to_s(x):
	if x == 0:
		return "A"
	if x == 1:
		return "C"
	if x == 2:
		return "G"
	if x == 3:
		return "T"
	
def s_to_n(symbol):
	if symbol == "A":
		return 0
	if symbol == "C":
		return 1
	if symbol == "G":
		return 2
	if symbol == "T":
		return 3

def profileForm(motifs):
	k = len(motifs[0])
	profile = [[0 for i in range(k)] for j in range(4)]
	for x in motifs:
		for i in range(len(x)):
			j = s_to_n(x[i])
			profile[j][i] += 1
	for x in profile:
		for y in x:
			y = y/len(motifs)
	return profile

def consensus(profile):
	str = ""
	for i in range(len(profile[0])):
		max = 0
		loc = 0
		for j in range(4):
			if profile[j][i] > max:
				loc = j
				max = profile[j][i]
		str+=n_to_s(loc)
	return str

def score(motifs):
	profile = profileForm(motifs)
	cons = consensus(profile)
	score = 0
	for x in motifs:
		for i in range(len(x)):
			if cons[i] != x[i]:
				score += 1
	return score

def greedyMotifSearch(dna, k, t):
	bestMotifs = []
	for x in dna:
		bestMotifs.append(x[0:k])
	for i in range(len(dna[0])-k+1):
		motifs = []
		motifs.append(dna[0][i:i+k])
		for j in range(1,t):
			profile = profileForm(motifs)
			motifs.append(profileProbable(dna[j], k, profile))
		if score(motifs) < score(bestMotifs):
			bestMotifs = motifs
	return bestMotifs

k = 12
t = 25
dna =["GCAGGTCACCCCGTTACTAAATGGGATCTACAGCACTGCAAAGCATCAGCTGTCGGTCCACTAGATGTACATTGGAACGCAGGCCCTATTGGCAGCTGACTCCACTTATTTTGTTGATGACTAACTAGTTTTACTCCTGTGGAAATCATCCATATA", "TGTTAGAAACAGCGGGAGAATAAGCGCCGCAGAACAAAGGCTCTTTGCGCCGGCGGGAATTAACCCAGGCACTTCCGTTTCGAGGACTGGTGGTAACTAGAGAGTTTTATACCGCCACGAGAGGATTCTAGTTCAGCCGCAGTGCGGGCCAGCGGT", "ATGCGCTACGACGGGATTAATCACGCGCCGGACGACATTATGTTACTCGTGCCCGAGAATGATATGCTAAAGCCAGCTACTGTACTTTCTCGTTACCGTGACTAAGAGTAACCAGATGGTTCGTTGGAGACCATCCGTAACTGACTACCATGTTTT", "TGGACTCTTATCGAGATTACGCTGGAGAGGGCCACTACTCTGAACGGGCTAAATCGTTTTTGTATCCTCTCTTCTGATGTCACCGACAGCGATTTGAGACTTACAACACTAGATTTTTTCCATACGCCCGGATAGAGCGGACCCAATGAGACCGGG", "GTATGTTTGTTACTTACGCCCGTCTATAGTATGAGGCTACAGCGTTTTTCCAGGAAGAAAATGGCACGATCTGACTGGTTGACAAGACGGCCTGGCCACAGCAAAACTTATCGTCAATCCGCCTTACCCCTCTTGAGAATGCGTGCCAAAGTGGCA", "GGAACACCCAGCCCCACTATGCTAGTCGGATAGAATCCGCGAACTAATCCCTTTAGTGCTGGATGATACCTGGAGTGCCCAGGGTGCGAGGGATAAAACCGGCAGGTGCACGCACAGGCTCAGCTTTAGGTGATTTGTACCCAGCTAGAATGTTTT", "GTTGTGTCTATCCCAGCTCACGCACTAAAGGGTTTTGGAAAGAGTTAAAATAGTCGTAGGTCTATCTACTTACGTCGTGTGGTGAACCGAAGTTACTACGCCTAAATCCGCACCTTGTGAGTTCTTCGCCCCGAGTGATTCTTGACAACCCGGCGA", "GTTCGCAACTCGATATGGTCAGACCTATGCGGTTTTCAGCAAAGTGTTAATCCCGAAAGTTTATAATTGCCAGTTACTCGGGACTCAGATAGCGCTCCCCGAGTGCCCTGTCATACGTATCCAGATTCTCTTTGTCCTAGCGTTTCGTTGTCCCAC", "GAACAACCATGAGTGGGAATGATTAACAGAGAAAACCTATAAGGTTTTACAGACGCCTCTAGAAGGTCGGGCCGTAAAGCGGCGCCGTCCAACACTAAGTGAAAAGACGGTTCTGCCTTTAATAATCGAACCACAACGAACGTCCAGGAGGGCGGA", "AAACTGGCTGCTAGCGGGGAGACACTAGTGAGTTTTTAGATGGCCGATTCATAGATGGGAGAGCGTTATCTTGGATTTTGGAGGATTCCGCATATAAGGGAAGACAGCGCATGGCTTGACGTGGAAATTTGAACTTGAGGGCCTCATGAAGCGTAG", "TGTATAGACCGTGTTAGCTGTTATCAATGGCTGAGGACACGGGGGGGCCTAGTTTGTTTTTACCATGTCCTTTAGTCAGTCGAGCGGGGTCTGAGAAGTCTTTTGGTCAAAATGGTATCTTCTGAACCCCTAGTCAGGTGGCCGTTTCAGGAACAT", "CGGAAACCCTATTTCTGTCGGGACGGATTGATCACTGGCAATGCATCCGATCCTTATATACTACCTAGTTTTAGGTGCGTTTCATTGCCGTAACAGGTGAGGTGCAATAGCTATTGTCTAGTGCACAATGACAGCGGTCTCAGTGACGAGGATTCT", "CCAGAAGGTTCGTAGACAACGCCACGACGGAGTAGGCTGTGCAGAGAAGATGGTTACTTGCTATCTAGTTTTGATTGTGCTTACGTAGCAACAGTACTGCTTCGTCACCTCCAGAGCGCTCCCGTAGGAGCAGGAGCAGTGCATCTCAGAGGGCCT", "TCCAGGGGGCACCTACCTAGTTTTTTGTCAAATGAACTCGGCAGAAGGCGTGGACGGGCATAACTACAGGTTGGCCCTATTTGTGAAAGTCCCCAGGTATCTCATAATCGGCTTCTCAACGATTTTGCCTTCGTCTGACTTCTGGAGATTCTTGGG", "CTATCACACGTGAAATAAGCCGCCCGTGGTCCGGAGCTAATCGGAATTATTAGTTTATCAAGGGTCCCGGCTTCGTGCCGGACCCGCCATGTGAGACTAAGGAGTTTTCGAAGGGTTGAATGTAGGTCAAATAGGTTGGATAAAGAGTTGTCACAA", "TTCACGTGTTGTTCACACACGGATTCCCGTCCCGGTGGAATCTGCGTGGCTGCTGCAGTCCTCACGTCTTGCCTAATGGGTTTTGCGCTCAGATCGTCCTACTCTGGCGTTGCCGCTTAACGATAATTTAATAACACCACTCAACCGCTCGATTTC", "ATCGCCTCGTGCAGGTGTGCTAACCAGTCCAGGTACATACGCAAATAACATGGTCTATGCGCTCAGTCATTTGACAAGCCCGGCTATAACAGCTTTCTACTCGGTTTTCGCTTGGAAAGGCAACATTGCGTTACTCGGGCAACAGCGGCAACCAGA", "GAGCTCACTGCACTATCCGGTTTTAGGACGGCCCGCCCTCCGGCGGACAACATTGCAAGCTCTCAGGACGATAGGGAGGGAATTGCCGCTCGAGGCTGGCCTATAGAGGTCCCTGATTGAAAATTTCGAGCAGATATAATAGGTACCCTTCTATAC", "GGATCATTAGATTTGCTTTTACAGGCCGAGAGACTTGGATCTGCATCACTACGGAGTTTTAACCGTCGTTGGGTAGTGAAGCCTTCCCTAAGAGCGGAATATACCTGAAGGCTTGGCAACTGTGAGCTGGCTGCGAGAGTGCAGTACCGTTGTTGC", "TAGCAAAGTATGGACCGCCAATTCTTGTATGTCAGTCAGGGACGACCAGACTTCGGGTCGCTAGCTCGTTTTCCGTCAACGCACTCAGTCAAAAAAAGGGGAGGGGTATGTGTCTTGGGTTCGTCTTTGGTCATATCACGAGGTACCCGTTGAGCG", "CAAAACGAGGGGATGCTGTACCCCCGTTAATTAATTCTACACAGTTTTGGGCTCCGCGTGCATCATCAGAGAAACCGCATCGGCGTCTACTAGAGTAGCTTTTGCCTCAAGGAGCTGAGTGAAATAACGTAGTGTTATCTAAATCTTACCTAAATT", "AAGGGTCGGTTGGAAGACGTATTAGCAAGACTATTATACTAGAATGCATACTACTTGACGGTGATCGGAAAACTAGACCGTTTTGGCCATGGCTCCTCATCAACCGCTATTAGCTAACGGCTCAAGACTGTATGTCGCCGTCAGACAACGATGACG", "TGTTGCGGGGATGAGGCTCACCCCGTTAGGTTTTCTAAAACTTAGTGGGTGTGTTTTCAACAAGAAAAACCTCTAAGCAGTTTTTATGGGTCGATTCCTGCTTCCCCGACACCTTGTGGCAATTGAGCACGTAATATCCCTGTGTCGCAATAGGAA", "TCTGTTACGAGAAAATAGCCCTAGAAAACTATTACACTATTAATCCCCTAATATCGGTTCAGGGGTAGCACCCTAGGTCGTTTTTATAGCCGTAGCCTGACGCCAGCCAGCCTGTCCCAATCTAGGTTCGTGGAGTTAGCTCCAGTCAAGTCCTGG", "AAATCACTCCAAGTATTGACTCTGCGACGAGTCGTCTATTGCTGTCCTCTACCTGGTTTTTGGTTTCATGGTAGTCCTAATGGATTTTGTCAGAACGAAGACCGTAAGAGAAATCAGGGTACGCTCATATGTACACAGGCCAATATCGACCCCAAC"]
a = greedyMotifSearch(dna, k, t)
for x in a:
	print(x)
	



